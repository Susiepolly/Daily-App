{"version":3,"sources":["img/fewClouds.jpg","img/sun.jpg","img/clearnight.jpg","img/fewCloudsN.jpg","img/clouds.png","img/cloudsN.png","img/rain.jpg","img/rainN.jpg","img/thunderstorm.jpg","img/snow.jpg","img/mist.jpg","components/Clock.js","components/Fact.js","components/Weather.js","components/Background.js","components/Searchbox.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Clock","time","date","Date","hours","getUTCHours","toString","padStart","minutes","getUTCMinutes","className","Fact","state","fact","now","this","props","month","getMonth","getDate","fetch","then","resp","json","text","setState","dailyFact","React","Component","bgColor","temp","Weather","city","weather","tempCurrent","Math","round","feelsLike","feels_like","forecast","description","icon","style","backgroundColor","alt","src","weatherImg","Sun","ClearNight","FewClouds","FewCloudsN","Clouds","CloudsN","Rain","RainN","Storm","Snow","Mist","Background","weatherIcon","sectionStyleLight","width","minHeight","backgroundImage","color","textShadow","position","top","sectionStyleDark","image","selectStyle","children","Searchbox","searchChange","onCityChange","componentDidMount","type","placeholder","onChange","onClick","App","timerID","setInterval","sec","searchfield","response","data","main","timezone","onSearchChange","event","target","value","clearInterval","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8c363ca3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/fewClouds.1781d717.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sun.eba3efa1.jpg\";","module.exports = __webpack_public_path__ + \"static/media/clearnight.d3ed2d86.jpg\";","module.exports = __webpack_public_path__ + \"static/media/fewCloudsN.a1289333.jpg\";","module.exports = __webpack_public_path__ + \"static/media/clouds.5c7206d9.png\";","module.exports = __webpack_public_path__ + \"static/media/cloudsN.5b67367e.png\";","module.exports = __webpack_public_path__ + \"static/media/rain.1f1938ed.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rainN.4f770876.jpg\";","module.exports = __webpack_public_path__ + \"static/media/thunderstorm.1bff3bc3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/snow.eaff3498.jpg\";","module.exports = __webpack_public_path__ + \"static/media/mist.b502406a.jpg\";","import React from 'react';\r\n\r\nconst Clock = ({ time }) => {\r\n\r\n    let date = new Date(time);\r\n\r\n    let hours = date.getUTCHours().toString().padStart(2, '0');\r\n    let minutes = date.getUTCMinutes().toString().padStart(2, '0');\r\n\r\n    return(\r\n      <h2 className='tc f1-ns f2 pa0 pa5-ns'>{hours}:{minutes}</h2>\r\n    );\r\n}\r\n\r\nexport default Clock;\r\n","import React from 'react';\r\n\r\nclass Fact extends React.Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      fact: '',\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    let now = new Date(this.props.time);\r\n    let month = now.getMonth() + 1;\r\n    let date = now.getDate();\r\n\r\n    fetch(`http://numbersapi.com/${month}/${date}/date?json`)\r\n    .then(resp => resp.json())\r\n    .then(text => this.setState( {fact: text }));\r\n  }\r\n\r\n  render() {\r\n    let dailyFact = this.state.fact.text;\r\n\r\n    return(\r\n    <div className='pa3 br3 f3-ns f4 tr w-50-ns' >\r\n        <p className='o-100'>{dailyFact}</p>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Fact;\r\n","import React from 'react';\r\n\r\nfunction bgColor(temp) {\r\n  if (temp < -6) {return '#BAC0E3'}\r\n  else if (temp < 1) {return '#AD8EBF'}\r\n  else if (temp < 7) {return '#83A7D6'}\r\n  else if (temp < 13) {return '#8AD6A3'}\r\n  else if (temp < 20) {return '#E0D35A'}\r\n  else if (temp < 26) {return '#D69553'}\r\n  else if (temp > 25) {return '#CC625D'}\r\n}\r\n\r\nconst Weather = ({ city, temp, weather}) => {\r\n\r\n    let tempCurrent = Math.round(temp.temp);\r\n    let feelsLike = Math.round(temp.feels_like);\r\n    let forecast = weather.description;\r\n    let icon = weather.icon;\r\n\r\n    return(\r\n      <div className='bg-lightest-blue dark-gray dib br3 pa3 ma2 grow bw2 shadow-5 tc' style={{ backgroundColor: bgColor(tempCurrent)}}>\r\n        <p className='pb0 mb0 f3'>{city}</p>\r\n        <img className='pa0 ma0' alt='weather logo' src={`http://openweathermap.org/img/wn/${icon}@2x.png`}/>\r\n        <p className='f1-ns f3 ma0'>{tempCurrent}° C</p>\r\n        <p>Feels like {feelsLike}° C</p>\r\n        <p>Forecast: {forecast}</p>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Weather;\r\n","import React from 'react';\r\nimport Sun from '../img/sun.jpg';\r\nimport ClearNight from '../img/clearnight.jpg';\r\nimport FewClouds from '../img/fewClouds.jpg';\r\nimport FewCloudsN from '../img/fewCloudsN.jpg';\r\nimport Clouds from '../img/clouds.png';\r\nimport CloudsN from '../img/cloudsN.png';\r\nimport Rain from '../img/rain.jpg';\r\nimport RainN from '../img/rainN.jpg';\r\nimport Storm from '../img/thunderstorm.jpg';\r\nimport Snow from '../img/snow.jpg';\r\nimport Mist from '../img/mist.jpg';\r\n\r\n\r\nfunction weatherImg(icon) {\r\n  switch(icon) {\r\n    case '01d':\r\n      return Sun;\r\n      break;\r\n    case '01n':\r\n      return ClearNight;\r\n      break;\r\n    case '02d':\r\n      return FewClouds;\r\n      break;\r\n    case '02n':\r\n      return FewCloudsN;\r\n      break;\r\n    case '03d':\r\n    case '04d':\r\n      return Clouds;\r\n      break;\r\n    case '03n':\r\n    case '04n':\r\n      return CloudsN;\r\n      break;\r\n    case '09d':\r\n    case '10d':\r\n      return Rain;\r\n      break;\r\n    case '09n':\r\n    case '10n':\r\n      return RainN;\r\n      break;\r\n    case '11d':\r\n    case '11n':\r\n      return Storm;\r\n      break;\r\n    case '13d':\r\n    case '13n':\r\n      return Snow;\r\n      break;\r\n    case '50d':\r\n    case '50n':\r\n      return Mist;\r\n      break;\r\n    default:\r\n     return FewClouds;\r\n  }\r\n}\r\n\r\nconst Background = (props) => {\r\n  let weatherIcon = props.weather.icon;\r\n\r\n  let sectionStyleLight = {\r\n  width: \"100%\",\r\n  minHeight: \"100vh\",\r\n  backgroundImage: `url(${weatherImg(weatherIcon)})`,\r\n  color: \"#000000\",\r\n  textShadow: \"1px 1px rgb(255, 255, 255, 0.5)\",\r\n  position: 'absolute',\r\n  top:'0'\r\n  };\r\n\r\n  let sectionStyleDark = {\r\n  width: \"100%\",\r\n  minHeight: \"100vh\",\r\n  backgroundImage: `url(${weatherImg(weatherIcon)})`,\r\n  color: \"#ffffff\",\r\n  textShadow: \"1px 1px rgb(0, 0, 0, 0.5)\",\r\n  position: 'absolute',\r\n  top:'0'\r\n  };\r\n\r\n  function selectStyle(image) {\r\n    switch(image) {\r\n      case Sun:\r\n      case FewClouds:\r\n      case Clouds:\r\n      case Rain:\r\n      case Snow:\r\n      case Mist:\r\n        return sectionStyleLight;\r\n        break;\r\n      case ClearNight:\r\n      case FewCloudsN:\r\n      case CloudsN:\r\n      case RainN:\r\n      case Storm:\r\n        return sectionStyleDark;\r\n        break;\r\n      default:\r\n      return sectionStyleLight;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div style={ selectStyle(weatherImg(weatherIcon)) }>\r\n      {props.children}\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default Background;\r\n","import React from 'react';\r\n\r\nconst Searchbox = ({city, searchChange, onCityChange, componentDidMount}) => {\r\n  return(\r\n    <div className='tc'>\r\n      <input type='search' placeholder='London' onChange={searchChange}/>\r\n      <button onClick={onCityChange}>Change City</button>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Searchbox;\r\n","import React from 'react';\nimport './App.css';\nimport Clock from './components/Clock';\nimport Fact from './components/Fact';\nimport Weather from './components/Weather';\nimport Background from './components/Background';\nimport Searchbox from './components/Searchbox';\n\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      date: new Date(),\n      temp: '',\n      weather: {},\n      searchfield: 'London',\n      city: 'London',\n      timezone: '',\n      // time: '',\n    }\n  }\n\n  componentDidMount = () => {\n    this.timerID = setInterval( () => this.sec(), 60000 );\n\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${this.state.searchfield}&units=metric&appid=3244bedb98e800f1f9b64d8220471999`)\n    .then(response => response.json())\n    .then(data => this.setState( {temp: data.main, weather: data.weather[0], timezone: data.timezone * 1000 }))\n    }\n\n    componentWillUnmount() {\n      clearInterval(this.timerID);\n    }\n\n    sec() {\n      this.setState({date: new Date() });\n      }\n\n    // onTimeChange = () => {\n    //   this.setState({time: new Date(this.state.date + this.state.timezone)})\n    // }\n\n    onSearchChange = (event) => {\n      this.setState({searchfield: event.target.value})\n    }\n\n    onCityChange = () => {\n      this.setState({city: this.state.searchfield});\n      this.componentDidMount();\n      // this.onTimeChange();\n      // console.log(this.state.timezone);\n    }\n\n\n\n\n  render() {\n    const { date, temp, weather, city, timezone } = this.state;\n    const time = +this.state.date + +this.state.timezone;\n    return(\n    <Background weather={weather}>\n      <Clock time={time} timezone={timezone}/>\n      <div className='weatherAndFact'>\n        <Weather city={city} temp={temp} weather={weather}/>\n        <Fact time={time}/>\n      </div>\n      <Searchbox onCityChange={this.onCityChange} searchChange={this.onSearchChange} componentDidMount={this.componentDidMount}/>\n    </Background>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App className='pa0 ma0'/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}